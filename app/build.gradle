apply plugin: 'com.android.application'
//apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'

android {
    compileSdkVersion 26
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    String isTest= rootProject.ext.config.isTest?"true":"false"

    String appName = rootProject.ext.config.isTest?"@string/app_name_test":"@string/app_name"
   String application_id= rootProject.ext.config.isTest?rootProject.ext.android.applicationIdTest:rootProject.ext.android.applicationId

    signingConfigs {

        release {
            keyAlias 'aschkey'
            keyPassword 'asch123456!'
            storeFile file(rootProject.ext.release_keystore)
            storePassword 'asch123456!'
        }
        debug {
            keyAlias 'aschkey'
            keyPassword 'asch123456!'
            storeFile file(rootProject.ext.debug_keystore)
            storePassword 'asch123456!'
        }
    }

    sourceSets.main {
        jniLibs.srcDirs = ['libs']  // <-- Set your folder here!
    }


    defaultConfig {
        renderscriptTargetApi rootProject.ext.android.targetSdkVersion
        renderscriptSupportModeEnabled true

//        applicationId rootProject.ext.android.applicationId
        applicationId  application_id
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        // testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
         addManifestPlaceholders([APP_NAME: appName])
        //addManifestPlaceholders([APP_NAME: "@string/app_name"])

        vectorDrawables.useSupportLibrary = true
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }


//        jackOptions {
//            enabled true
//        }
        multiDexEnabled true

//        ndk {
//            abiFilters 'armeabi', 'armeabi-v7a','arm64-v8a', 'x86'
//        }
    }

    dexOptions {
        //incremental true
        javaMaxHeapSize "4g"
    }

    buildTypes {
        debug {
            buildConfigField("boolean", "LOG_DEBUG", "true")
            buildConfigField("boolean", "TEST", isTest)
            //resValue "string", "app_name", "ASCH钱包Test"
            //addManifestPlaceholders([APP_NAME: appName])
            //buildConfigField 'com.baronzhang.android.library.util.StethoHelper', 'STETHO', 'new com.baronzhang.android.weather.util.stetho.DebugStethoHelper()'
        }
        local{
            matchingFallbacks = ['release', 'debug']
        }
        preview {
            //关键代码，release， debug为library中已有buildType
            matchingFallbacks = ['release', 'debug']
        }

        release {
            buildConfigField("boolean", "LOG_DEBUG", "false")
            buildConfigField("boolean", "TEST", isTest)
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //addManifestPlaceholders([APP_NAME: appName])
           // resValue "string", "app_name", "ASCH钱包Test"
            // buildConfigField 'com.baronzhang.android.library.util.StethoHelper', 'STETHO', 'new com.baronzhang.android.weather.util.stetho.ReleaseStethoHelper()'
        }
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
    }

//    applicationVariants.all { variant ->
//        variant.outputs.all { output ->
//
//            def outputFile = output.outputFile
//            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                def fileName = "asch-app-${defaultConfig.versionName}(${defaultConfig.versionCode})-${variant.buildType.name}.apk"
//                output.outputFile.renameTo(new File(outputFile.parent, fileName))
////                rename_andd_moveout_apk(output.outputFile,variant.buildType.name)
//            }
//        }
//    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

//    configurations.all {
//        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
//    }

//    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2') {
//        exclude group: 'com.google.code.findbugs'
//    }

    packagingOptions {
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
        exclude 'lib/x86_64/freebsd/libscrypt.so'
        exclude 'lib/x86_64/linux/libscrypt.so'
        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixPatterns.gwt.xml'
        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixType.gwt.xml'
        exclude 'org/bitcoinj/crypto/mnemonic/wordlist/english.txt'
        exclude 'org/bitcoinj/crypto/cacerts'
        exclude 'org.bitcoin.production.checkpoints.txt'
        exclude 'org.bitcoin.test.checkpoints.txt'
    }
}

dependencies {
    //    implementation 'com.android.support:support-v4:26.1.0'
//    implementation 'com.android.support:support-v4:26.1.0'
//    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation rootProject.ext.dependencies['support-v4']
    implementation rootProject.ext.dependencies['recyclerview']
    //implementation rootProject.ext.dependencies['appcompat-v7']

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation  'com.google.code.findbugs:jsr305:3.0.2'
    implementation rootProject.ext.dependencies["appcompat-v7"]
    implementation rootProject.ext.dependencies["design"]
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:multidex:1.0.1'
    //    releaseCompile project(path: ':base', configuration: 'release')
    //    debugCompile project(path: ':base', configuration: 'debug')
    implementation project(':base')
    implementation project(':widget')
    implementation project(':asch-java')
    implementation project(':update-app')
    implementation project(path: ':CordovaLib')
    implementation rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    implementation rootProject.ext.dependencies["dagger"]
    annotationProcessor rootProject.ext.dependencies["dagger-compiler"]
    implementation rootProject.ext.dependencies["retrofit2-fastjson-converter"]
    implementation rootProject.ext.dependencies["cardview"]
    implementation rootProject.ext.dependencies["rxandroid"]
    implementation rootProject.ext.dependencies["fastjson"]
    implementation rootProject.ext.dependencies["smart-refresh-layout"]
    implementation rootProject.ext.dependencies["smart-refresh-header"]
    implementation rootProject.ext.dependencies["circleimageview"]
    implementation rootProject.ext.dependencies["zxing-core"]
    implementation rootProject.ext.dependencies["bga-zxing"]
    implementation rootProject.ext.dependencies["bga-qrcodecore"]
    implementation rootProject.ext.dependencies["bga-zbar"]
    implementation rootProject.ext.dependencies["easypermissions"]
    implementation rootProject.ext.dependencies["js-bridge"]
    implementation rootProject.ext.dependencies["agentweb"]
    implementation rootProject.ext.dependencies["hawk"]
    implementation rootProject.ext.dependencies["youth-banner"]
    implementation rootProject.ext.dependencies["realtimeblurview"]
    implementation rootProject.ext.dependencies["baseRecyclerViewAdapterHelper"]
    implementation rootProject.ext.dependencies["passcodeview"]
    implementation rootProject.ext.dependencies["dialogplus"]
    implementation(rootProject.ext.dependencies["lollipin"]) {
        transitive = true
    }
    implementation rootProject.ext.dependencies["ldialogs"]
    implementation rootProject.ext.dependencies["utilcode"]
    implementation rootProject.ext.dependencies["easy-popup"]
    implementation rootProject.ext.dependencies["bubbleLayout"]
    implementation rootProject.ext.dependencies["bugly"]
    implementation rootProject.ext.dependencies["loadinglayout"]
    implementation rootProject.ext.dependencies["flycoTabLayout"]
    implementation rootProject.ext.dependencies["kprogresshud"]
    implementation rootProject.ext.dependencies["toasty"]
    implementation rootProject.ext.dependencies["glide"]
    implementation rootProject.ext.dependencies["bgaBaseadapter"]
    implementation rootProject.ext.dependencies["bgaPhotopicker"]
    implementation rootProject.ext.dependencies["switchIcon"]
    //implementation rootProject.ext.dependencies["update"]

    implementation rootProject.ext.dependencies["okhttpUtils"]
    implementation rootProject.ext.dependencies["filedownloader"]
    implementation rootProject.ext.dependencies["expandablelayout"]
    implementation rootProject.ext.dependencies["expandablelayout"]
    implementation rootProject.ext.dependencies["progressButton"]
    implementation rootProject.ext.dependencies["eventbus"]
    implementation rootProject.ext.dependencies["switchbutton"]
    implementation rootProject.ext.dependencies["localeChanger"]
}

//def rename_andd_moveout_apk(orignalFile, buildType) {
//    def intoFile = rootDir.parentFile.getAbsolutePath()+File.separator+"updateTest"
//    def originName=intoFile+File.separator+orignalFile.name
//    def toName=intoFile+File.separator+"asch-app-"+buildType+".apk"
//
//    //println intoFile
//    copy {
//        from orignalFile.getAbsolutePath()
//        into intoFile
//        rename(originName, toName)
//    }
//}
